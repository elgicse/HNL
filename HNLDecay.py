from array import array
from options import *

"""Show branching fractions"""
cSaver = []
#r.gROOT.ProcessLine(".x lhcbstyle.C")

def makeBRPlot(model):
    pp = physicsParameters()
    pp.setNCoupling(model)
    brpie, brpimu, brpinu, brrhoe, brrhomu, brrhonu, br3nu, breenu, lt = [], [], [], [], [], [], [], [], []
    m = np.linspace(0.,2.,20).tolist()
    m.remove(m[0])
    for mass in m:
        pp.setNMass(mass)
        brpie.append(pp.Width_H_l('pi',1)/pp.NDecayWidth())
        brpimu.append(pp.Width_H_l('pi',2)/pp.NDecayWidth())
        brrhoe.append(pp.Width_H_l('rho',1)/pp.NDecayWidth())
        brrhomu.append(pp.Width_H_l('rho',2)/pp.NDecayWidth())
        brpinu.append(sum([pp.Width_H0_nu('pi',l) for l in [1,2,3]])/pp.NDecayWidth())
        brrhonu.append(sum([pp.Width_H0_nu('rho',l) for l in [1,2,3]])/pp.NDecayWidth())
        breenu.append(sum([pp.Width_l1_l2_nu(1,1,l) for l in [1,2,3]])/pp.NDecayWidth())
        br3nu.append(pp.Width_3nu()/pp.NDecayWidth())
        lt.append(pp.computeNLifetime())
    #brpieR = array('f',brpie)
    #brpinuR = array('f',brpinu)
    #brrhoeR = array('f',brrhoe)
    #br3nuR = array('f',br3nu)
    mR = array('f',m)
    mgr = r.TMultiGraph()
    grpie = r.TGraph(len(m),mR,array('f',brpie))
    grpinu = r.TGraph(len(m),mR,array('f',brpinu))
    grrhoe = r.TGraph(len(m),mR,array('f',brrhoe))
    gr3nu = r.TGraph(len(m),mR,array('f',br3nu))
    grrhonu = r.TGraph(len(m),mR,array('f',brrhonu))
    grpimu = r.TGraph(len(m),mR,array('f',brpimu))
    grrhomu = r.TGraph(len(m),mR,array('f',brrhomu))
    greenu = r.TGraph(len(m),mR,array('f',breenu))
    grpie.SetLineColor(r.kBlue)
    grpie.SetLineWidth(3)
    grpinu.SetLineColor(r.kRed)
    grpinu.SetLineWidth(3)
    grrhonu.SetLineColor(r.kYellow)
    grrhonu.SetLineWidth(3)
    grrhomu.SetLineColor(r.kGray)
    grrhomu.SetLineWidth(3)
    grpimu.SetLineColor(r.kOrange)
    grpimu.SetLineWidth(3)
    grrhoe.SetLineColor(r.kGreen)
    grrhoe.SetLineWidth(3)
    gr3nu.SetLineColor(r.kBlack)
    gr3nu.SetLineWidth(3)
    greenu.SetLineColor(r.kViolet)
    greenu.SetLineWidth(3)
    mgr.Add(gr3nu)
    mgr.Add(grpie)
    mgr.Add(grpimu)
    mgr.Add(grrhoe)
    mgr.Add(grrhomu)
    mgr.Add(grpinu)
    mgr.Add(grrhonu)
    mgr.Add(greenu)
    mgr.SetTitle("Branching ratio for HNL (model: U^{2} = %s)"%str(model))
    c1 = r.TCanvas(str(model),str(model))
    cSaver.append(c1)
    mgr.Draw("alp")
    mgr.GetYaxis().SetRangeUser(0.00001,1.)
    c1.SetLogy()
    mgr.GetXaxis().SetRangeUser(m[0],m[-1])
    mgr.GetXaxis().SetTitle("HNL mass (GeV)")
    leg = r.TLegend(0.6,0.1,0.8,0.5)
    leg.SetFillColor(r.kWhite)
    leg.AddEntry(gr3nu,'N#rightarrow#nu#nu#nu','l')
    leg.AddEntry(grpinu,'N#rightarrow#pi#nu','l')
    leg.AddEntry(grpie,'N#rightarrow#pie','l')
    leg.AddEntry(grpimu,'N#rightarrow#pi#mu','l')
    leg.AddEntry(grrhonu,'N#rightarrow#rho#nu','l')
    leg.AddEntry(grrhoe,'N#rightarrow#rhoe','l')
    leg.AddEntry(grrhomu,'N#rightarrow#rho#mu','l')
    leg.AddEntry(greenu,'N#rightarrowe^{+}e^{-}#nu','l')
    leg.Draw()

    c2 = r.TCanvas("lifetime","lifetime")
    cSaver.append(c2)
    grlt = r.TGraph(len(m),mR,array('f',lt))
    grlt.SetTitle("HNL lifetime for model %s"%str(model))
    grlt.GetXaxis().SetTitle("HNL mass (GeV)")
    grlt.SetLineWidth(3)
    grlt.Draw("ac")
    c2.SetLogy()
    grlt.GetXaxis().SetRangeUser(m[0],m[-1])
    return mgr,leg,grlt
